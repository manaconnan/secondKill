<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"

       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd

       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">



        <!--spring希望管理所有的业务逻辑组件等-->
        <context:component-scan base-package="com.mazexiang" >
                <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        </context:component-scan>

        <!--Spring用来控制业务逻辑： 数据源、事务控制、aop-->

        <!--=======================引入数据库的配置文件====================-->
        <context:property-placeholder location="classpath:db.properties"/>

        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <property name="driverClass" value="${jdbc.driver}"/>
                <property name="jdbcUrl" value="${jdbc.url}"/>
                <property name="user" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.password}"/>


                <!--c3p0连接池的私有属性-->
                <property name="maxPoolSize" value="30"/>
                <property name="minPoolSize" value="10"/>
                <!--关闭连接后，不自动commit-->
                <property name="autoCommitOnClose" value="false"/>
                <!--获取连接超时的等待时间，mybatis默认是无线等待-->
                <property name="checkoutTimeout" value="1000"/>
                <!--当获取连接失败之后的尝试次数-->
                <property name="acquireRetryAttempts" value="2"/>


        </bean>



        <!--======================Spring的事务管理==============================-->
        <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <property name="dataSource" ref="dataSource"/>
        </bean>

        <!--开启基于注解的事务-->
        <!--<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>-->


        <!--使用xml配置形式的事务（必要主要的都是使用这种配置方式）-->
        <!--<aop:config>-->
                <!--切入点表达式 ：   service包下的所有类和方法都要事务控制 -->
                <!--=====指明哪些地方需要切入事务-->
                <!--<aop:pointcut id="txPoint" expression="execution(* com.mazexiang.service..*(..))"/>-->
                <!--配置事务增强-->
                <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>-->
        <!--</aop:config>-->

        <!--配置事务增强，事务如何切入 -->
        <!--指明切入事务之后该怎么办呢？？ 由transaction-manager事务管理器指定事务管理方法-->
        <!--如果上述的dataSourceTransactionManager的名字就改为transactionManager，则下处的transaction-manager可省略-->
        <!--<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">-->
                <!--<tx:attributes>-->
                        <!--&lt;!&ndash;所有方法都是事务方法&ndash;&gt;-->
                        <!--<tx:method name="*"/>-->
                        <!--<tx:method name="get*" read-only="true"/>-->
                <!--</tx:attributes>-->

        <!--</tx:advice>-->



        <!--=====================整合mybatis=================================
                目的：SPring管理所有组件 ：mapper的实现类
                 2、spring来管理事务
        -->

        <!--创建SqlSessionFactory对象-->
        <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                <!--注入数据库连接池-->
                <property name="dataSource" ref="dataSource"/>
                <!--指定Mybatis全局配置文件的位置-->
                <property name="configLocation" value="classpath:mybatis-config.xml"/>
                <!--指定mapper文件的位置-->
                <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        </bean>

        <!-- 扫描所有dao接口的实现,动态实现dao接口，加入到ioc容器中-->
        <mybatis:scan base-package="com.mazexiang.domain.dao"/>




</beans>